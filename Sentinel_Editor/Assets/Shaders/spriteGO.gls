#version 330

#ifdef VERTEX_SHADER

uniform mat4 wvp;
uniform vec4 texScale;

in vec2 aTexture0;
in vec4 aColor;
in mat4 aMatrix;

out vec2 gvTex0;
out vec4 gvColor;
out mat4 gvMatrix;

void main()
{
	// Position
	gl_Position = vec4(0, 0, 0, 1);
	
	// Texture color
	gvTex0 = aTexture0 * texScale.xy;

	// Vertex color
	gvColor = aColor;

	// Matrix
	gvMatrix = wvp * aMatrix;
}

#endif
#ifdef GEOMETRY_SHADER

uniform vec4 texScale;

in vec2 gvTex0[];
in vec4 gvColor[];
in mat4 gvMatrix[];

out vec2 vTex0;
out vec4 vColor;

//layout (points) in;
//layout (triangle_strip, max_vertices=4) out;

void main()
{
	vColor = gvColor[0];

	// Bottom left.
	//
	gl_Position = gvMatrix[0] * vec4(-1, 1, 0, 1);
	vTex0 = vec2(gvTex0[0].x, gvTex0[0].y + texScale.y);
	EmitVertex();

	// Bottom right.
	//
	gl_Position = gvMatrix[0] * vec4(1, 1, 0, 1);
	vTex0 = gvTex0[0] + texScale.xy;
	EmitVertex();

	// Top left.
	//
	gl_Position = gvMatrix[0] * vec4(-1, -1, 0, 1);
	vTex0 = gvTex0[0];
	EmitVertex();

	// Top right.
	//
	gl_Position = gvMatrix[0] * vec4(1, -1, 0, 1);
	vTex0 = vec2(gvTex0[0].x + texScale.x, gvTex0[0].y);
	EmitVertex();
	
	EndPrimitive();
}

#endif
#ifdef FRAGMENT_SHADER

uniform sampler2D tex0;

in vec2 vTex0;
in vec4 vColor;

out vec4 vFragColor;

void main()
{
	// Final fragment color
	vFragColor = clamp(texture2D(tex0, vTex0) * vColor, 0.0, 1.0);
}

#endif
